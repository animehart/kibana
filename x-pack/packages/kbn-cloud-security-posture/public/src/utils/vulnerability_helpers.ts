/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { VULNERABILITIES_SEVERITY } from '@kbn/cloud-security-posture-common';
import { i18n } from '@kbn/i18n';
import { getSeverityStatusColor } from './get_vulnerability_colors';
import { getSeverityText } from './get_vulnerability_text';

interface VulnerabilitiesDistributionBarProps {
  key: string;
  count: number;
  color: string;
  isCurrentFilter?: boolean;
  onClick?: () => void;
  onClickReset?: (event: any) => void;
}

interface VulnerabilityCounts {
  critical: number;
  high: number;
  medium: number;
  low: number;
  none: number;
}

export const hasVulnerabilitiesData = (counts: VulnerabilityCounts): boolean => {
  if (Object.values(counts).reduce((acc, value) => acc + value, 0) > 0) return true;
  return false;
};

export const getVulnerabilityStats = (
  counts: VulnerabilityCounts,
  filterFunction?: (filter: string) => void,
  currentFilter?: string
): VulnerabilitiesDistributionBarProps[] => {
  const vulnerabilityStats: VulnerabilitiesDistributionBarProps[] = [];

  const levels = Object.values(counts);

  if (levels.every((level) => level === 0)) {
    return vulnerabilityStats;
  }

  if (counts.none > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.noneVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.UNKNOWN),
        }
      ),
      count: counts.none,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.UNKNOWN),
      onClick: () => {
        filterFunction?.('UNKNOWN');
      },
      isCurrentFilter: currentFilter === 'UNKNOWN',
      onClickReset: (event: React.MouseEvent<SVGElement, MouseEvent>) => {
        filterFunction?.('');
        event?.stopPropagation();
      },
    });
  if (counts.low > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.lowVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.LOW),
        }
      ),
      count: counts.low,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.LOW),
      onClick: () => {
        filterFunction?.('LOW');
      },
      isCurrentFilter: currentFilter === 'LOW',
      onClickReset: (event: React.MouseEvent<SVGElement, MouseEvent>) => {
        filterFunction?.('');
        event?.stopPropagation();
      },
    });

  if (counts.medium > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.mediumVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.MEDIUM),
        }
      ),
      count: counts.medium,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.MEDIUM),
      onClick: () => {
        filterFunction?.('MEDIUM');
      },
      isCurrentFilter: currentFilter === 'MEDIUM',
      onClickReset: (event: React.MouseEvent<SVGElement, MouseEvent>) => {
        filterFunction?.('');
        event?.stopPropagation();
      },
    });
  if (counts.high > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.highVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.HIGH),
        }
      ),
      count: counts.high,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.HIGH),
      onClick: () => {
        filterFunction?.('HIGH');
      },
      isCurrentFilter: currentFilter === 'HIGH',
      onClickReset: (event: React.MouseEvent<SVGElement, MouseEvent>) => {
        filterFunction?.('');
        event?.stopPropagation();
      },
    });
  if (counts.critical > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.CriticalVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.CRITICAL),
        }
      ),
      count: counts.critical,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.CRITICAL),
      onClick: () => {
        filterFunction?.('CRITICAL');
      },
      isCurrentFilter: currentFilter === 'CRITICAL',
      onClickReset: (event: React.MouseEvent<SVGElement, MouseEvent>) => {
        filterFunction?.('');
        event?.stopPropagation();
      },
    });

  return vulnerabilityStats;
};
