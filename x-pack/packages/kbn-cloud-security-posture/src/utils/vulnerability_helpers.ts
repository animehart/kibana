/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { VULNERABILITIES_SEVERITY } from '@kbn/cloud-security-posture-common';
import { i18n } from '@kbn/i18n';
import { getSeverityStatusColor } from './get_vulnerability_colors';
import { getSeverityText } from './get_vulnerability_text';

interface VulnerabilitiesDistributionBarProps {
  key: string;
  count: number;
  color: string;
}

export const getVulnerabilityStats = (
  critical: number,
  high: number,
  medium: number,
  low: number,
  none: number
): VulnerabilitiesDistributionBarProps[] => {
  const vulnerabilityStats: VulnerabilitiesDistributionBarProps[] = [];
  if (critical === 0 && high === 0 && medium === 0 && low === 0 && none === 0)
    return vulnerabilityStats;

  if (none > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.noneVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.UNKNOWN),
        }
      ),
      count: none,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.UNKNOWN),
    });
  if (low > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.lowVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.LOW),
        }
      ),
      count: low,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.LOW),
    });

  if (medium > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.mediumVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.MEDIUM),
        }
      ),
      count: medium,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.MEDIUM),
    });
  if (high > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.highVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.HIGH),
        }
      ),
      count: high,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.HIGH),
    });
  if (critical > 0)
    vulnerabilityStats.push({
      key: i18n.translate(
        'xpack.securitySolution.flyout.right.insights.vulnerabilities.CriticalVulnerabilitiesText',
        {
          defaultMessage: getSeverityText(VULNERABILITIES_SEVERITY.CRITICAL),
        }
      ),
      count: critical,
      color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.CRITICAL),
    });

  return vulnerabilityStats;
};
